# cloudbuild.yaml
steps:
  # 1. Build the Docker image from the k8s_broadcaster directory
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    args:
      - 'build'
      - '-t'
      - '${_AR_HOSTNAME}/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${COMMIT_SHA}'
      - './k8s_broadcaster'

  # 2. Push the tagged image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push
    args:
      - 'push'
      - '${_AR_HOSTNAME}/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${COMMIT_SHA}'

  # 3. Deploy to GKE clusters using kubectl and Kustomize
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy
    entrypoint: bash
    args:
      - -c
      - |
        set -e # Exit script on first error
        
        # Add the stunner helm repo
        helm repo add stunner https://l7mp.io/stunner
        helm repo update

        echo "--- Dynamically generating kustomization file with new image ---"
        # Since 'kustomize' command is not available, we manually create the kustomization
        # file with the new image information. This achieves the same as 'kustomize edit set image'.
        cat <<EOF > kustomize/base/kustomization.yaml
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization
        resources:
          - broadcaster.yaml
          - stunner-common.yaml
          - broadcaster-udproute.yaml
        images:
        - name: ghcr.io/l7mp/multicluster-broadcaster-swm-l7mp/k8s_broadcaster
          newName: ${_AR_HOSTNAME}/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}
          newTag: ${COMMIT_SHA}
        EOF

        echo "---- DEPLOYING TO ALL CLUSTERS ----"

        # The GKE clusters to deploy to, taken from substitution variables
        CLUSTERS=(
          "${_GKE_US_LOCATION}|${_GKE_US_CLUSTER}"
          "${_GKE_EU_LOCATION}|${_GKE_EU_CLUSTER}"
          "${_GKE_ASIA_LOCATION}|${_GKE_ASIA_CLUSTER}"
        )

        for cluster_info in "${CLUSTERS[@]}"; do
          IFS="|" read -r location cluster <<< "$cluster_info"
          echo "--- Deploying to ${cluster} in ${location} ---"
          
          # Get GKE cluster credentials
          gcloud container clusters get-credentials "${cluster}" --region "${location}" --project "${PROJECT_ID}"
          
          # Install/upgrade stunner operator
          helm upgrade --install stunner-gateway-operator stunner/stunner-gateway-operator --create-namespace --namespace stunner

          # Use 'kubectl apply -k' which leverages the kustomize functionality built into kubectl
          kubectl apply -k kustomize/overlays/"${location}"

          echo "--- Finished deployment to ${cluster} ---"
          echo
        done

substitutions:
  # The location of your Artifact Registry repository - UPDATED
  _AR_HOSTNAME: us-central1-docker.pkg.dev
  # The name of your Artifact Registry repository - UPDATED
  _REPO_NAME: broadcaster-repo-central1
  # The name for our docker image
  _IMAGE_NAME: broadcaster
  # Cluster configurations - updated to match your regions
  _GKE_US_CLUSTER: broadcaster-us
  _GKE_US_LOCATION: us-east5
  _GKE_EU_CLUSTER: broadcaster-eu
  _GKE_EU_LOCATION: europe-west9
  _GKE_ASIA_CLUSTER: broadcaster-asia
  _GKE_ASIA_LOCATION: asia-southeast1

# Store the pushed image name for other steps to use
images:
  - '${_AR_HOSTNAME}/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${COMMIT_SHA}'

# Add build options
options:
  # This option tells Cloud Build to send logs directly to Cloud Logging
  # and not to use a Cloud Storage bucket. This is required when using a
  # custom service account.
  logging: CLOUD_LOGGING_ONLY 